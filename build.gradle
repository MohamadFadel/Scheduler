plugins {
	id 'war'
	id 'java'
	id 'maven-publish'
	id 'org.sonarqube' version '4.0.0.2929'
	id 'org.springframework.boot' version '2.7.18'
	id 'io.freefair.lombok' version "8.3"
}

assemble.dependsOn(war)

group = 'com.wavemark'
version = '1.2.3'

java {
	sourceCompatibility = '1.8'
	targetCompatibility = '1.8'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	maven {
		url 'https://nexus.cardinalhealth.net/repository/maven/'
	}
	mavenLocal()
}

springBoot{
	buildInfo()
}

// TODO: Waiting for nitrodx to remove added dependencies
dependencies {
	implementation ('com.cardinalhealth:wm-service-support:0.0.99') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-data-elasticsearch'
	}

	implementation (libs.spring.boot.starter.web) {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
		exclude group: 'org.springframework', module: 'spring-web'
	}

	implementation(libs.spring.boot.starter.validation) {
		exclude group: 'tomcat-embed-el', module: 'org.apache.tomcat.embed'
	}

	providedRuntime libs.spring.boot.starter.tomcat
    implementation libs.spring.boot.starter.data.jpa
	implementation libs.spring.web
	implementation libs.spring.security.core
	implementation libs.jackson.databind
	implementation 'org.springframework.boot:spring-boot-starter-jdbc:2.7.18'
	implementation 'org.springframework:spring-context-support:5.3.30'
	implementation 'org.apache.httpcomponents:httpclient:4.5.13'
	implementation 'org.quartz-scheduler:quartz:2.3.2'
	implementation 'com.mchange:c3p0:0.9.5.5'
	implementation 'org.apache.logging.log4j:log4j-api:2.18.0'
	implementation 'org.liquibase:liquibase-core:4.23.0'
	implementation 'com.oracle.database.jdbc:ojdbc8:21.5.0.0'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-common:1.8.22'
	implementation 'com.squareup.okhttp3:okhttp:4.11.0'
	implementation 'javax.servlet:javax.servlet-api:4.0.1'
	implementation 'org.hibernate.validator:hibernate-validator:6.2.5.Final'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	implementation 'ch.qos.logback:logback-classic:1.2.13'
	implementation 'commons-io:commons-io:2.15.1'
	implementation 'org.springframework:spring-aspects:5.3.33'
	implementation 'com.google.guava:guava:32.1.2-jre'
	implementation 'org.owasp.encoder:encoder:1.2.3'
	implementation libs.spring.boot.starter.mail
	implementation 'net.redhogs.cronparser:cron-parser-core:3.5'
	implementation 'io.github.classgraph:classgraph:4.8.174'


	//Security
	implementation libs.wm.app.warden.resource
	implementation libs.spring.security.oauth
    implementation libs.spring.security.oauth2
    implementation libs.spring.security.oauth2.autoconfigure
	implementation libs.spring.security.config
	implementation libs.spring.security.web
	implementation libs.spring.security.crypto

	//Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test:2.7.18'
	testImplementation 'io.cucumber:cucumber-java:7.13.0'
	testImplementation 'io.cucumber:cucumber-junit:7.13.0'
	testImplementation 'io.cucumber:cucumber-spring:7.13.0'
	testImplementation 'io.zonky.test:embedded-database-spring-test:2.3.0'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
	testImplementation('org.simplify4u:slf4j-mock:2.3.0') {
		exclude group: 'org.mockito', module: 'mockito-core'
	}
}

configurations.implementation {
	exclude group: "org.springframework.security", module: "spring-security-jwt"
	exclude group: "co.elastic.clients", module: "elasticsearch-java"
}

configurations.testImplementation {
	exclude group: "ch.qos.logback", module: "logback-classic"
}

jar {
	enabled = false
}

bootJar {
	enabled = false
}

bootWar {
	enabled = false
}

war {
	manifest {
		attributes("Implementation-Title": "wm-app-scheduler",
				"Weblogic-Application-Version": archiveVersion)
	}
	enabled = true
	archiveFileName = 'wm-app-scheduler.war'
}

sourceSets {
	integration_test {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
		}
	}
}

configurations {
	integration_testImplementation.extendsFrom(testImplementation)
	integration_testRuntimeOnly.extendsFrom(testRuntimeOnly)
}

test {
	useJUnitPlatform()
	scanForTestClasses = false
	exclude '**/cucumber/**'
}

//configurations {
//	cucumberRuntime {
//		extendsFrom testImplementation
//	}
//}